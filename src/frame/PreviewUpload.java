/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frame;

import java.awt.Color;
import java.awt.Frame;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author User
 */
public class PreviewUpload extends javax.swing.JFrame {

    static boolean maximized = true;
    static boolean loggedIn = true;
    int xMouse;
    int yMouse;
    
    Connection conn = null;
    PreparedStatement st;
    ResultSet rs;
    
    User userSession = new User();
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    
    /**
     * Creates new form ProjectPreviewUpload
     */
    public PreviewUpload() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleBar = new javax.swing.JPanel();
        minimizeBtn = new javax.swing.JButton();
        exitBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataProPreview = new javax.swing.JTable();
        uploadBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        titleBar.setBackground(new java.awt.Color(0, 0, 0));
        titleBar.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                titleBarMouseDragged(evt);
            }
        });
        titleBar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                titleBarMousePressed(evt);
            }
        });

        minimizeBtn.setBackground(new java.awt.Color(0, 0, 0));
        minimizeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userBar/minimize.png"))); // NOI18N
        minimizeBtn.setToolTipText("Minimize");
        minimizeBtn.setContentAreaFilled(false);
        minimizeBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        minimizeBtn.setMargin(new java.awt.Insets(0, 0, 0, 0));
        minimizeBtn.setMaximumSize(new java.awt.Dimension(64, 64));
        minimizeBtn.setMinimumSize(new java.awt.Dimension(64, 64));
        minimizeBtn.setOpaque(true);
        minimizeBtn.setPreferredSize(new java.awt.Dimension(64, 64));
        minimizeBtn.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/userBar/minimizeSelected.png"))); // NOI18N
        minimizeBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                minimizeBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                minimizeBtnMouseEntered(evt);
            }
        });

        exitBtn.setBackground(new java.awt.Color(0, 0, 0));
        exitBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userBar/exit.png"))); // NOI18N
        exitBtn.setToolTipText("Exit");
        exitBtn.setContentAreaFilled(false);
        exitBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        exitBtn.setMargin(new java.awt.Insets(0, 0, 0, 0));
        exitBtn.setMaximumSize(new java.awt.Dimension(64, 64));
        exitBtn.setMinimumSize(new java.awt.Dimension(64, 64));
        exitBtn.setOpaque(true);
        exitBtn.setPreferredSize(new java.awt.Dimension(64, 64));
        exitBtn.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/userBar/exitSelected.png"))); // NOI18N
        exitBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitBtnMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                exitBtnMouseEntered(evt);
            }
        });

        javax.swing.GroupLayout titleBarLayout = new javax.swing.GroupLayout(titleBar);
        titleBar.setLayout(titleBarLayout);
        titleBarLayout.setHorizontalGroup(
            titleBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, titleBarLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(minimizeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(exitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1))
        );
        titleBarLayout.setVerticalGroup(
            titleBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(minimizeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(exitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jLabel1.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Preview Upload Project Data");

        dataProPreview.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(dataProPreview);

        uploadBtn.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        uploadBtn.setText("Upload");
        uploadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(titleBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 912, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(uploadBtn)
                .addGap(417, 417, 417))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(titleBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
                .addGap(8, 8, 8)
                .addComponent(uploadBtn))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void minimizeBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeBtnMouseClicked
        this.setState(Frame.ICONIFIED);
    }//GEN-LAST:event_minimizeBtnMouseClicked

    private void minimizeBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_minimizeBtnMouseEntered
        minimizeBtn.setBackground(new Color(0, 0, 0));
    }//GEN-LAST:event_minimizeBtnMouseEntered

    private void exitBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitBtnMouseClicked
        this.dispose();
    }//GEN-LAST:event_exitBtnMouseClicked

    private void exitBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitBtnMouseEntered
        exitBtn.setBackground(new Color(0, 0, 0));
    }//GEN-LAST:event_exitBtnMouseEntered

    private void titleBarMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_titleBarMouseDragged
        if (maximized) {
            int x = evt.getXOnScreen();
            int y = evt.getYOnScreen();
            this.setLocation(x - xMouse, y - yMouse);
        }
    }//GEN-LAST:event_titleBarMouseDragged

    private void titleBarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_titleBarMousePressed
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_titleBarMousePressed

    private void uploadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadBtnActionPerformed
        // Switch DataType Selected in Data Wizard Window
        switch (DataWizard.dataType.getSelectedIndex()) {
            // DO THIS IF DATA TYPE = PROJECT
            case 0:
                // UPLOAD PROJECT JTABLE TO PROJECT MYSQL TABLE
                projectSQL();
                // Exit all DataWizard Frames/Windows
                this.dispose();
                break;
            // DO THIS IF DATA TYPE = PARTICIPANT  
            case 1:
                // UPLOAD PARTICIPANT JTABLE TO PARTICIPANT MYSQL TABLE
                partSQL();
                // Exit all DataWizard Frames/Window
                this.dispose();
                break;
            default:
                // Display error if Table inserted does not match MySQL Project Table Headers
                JOptionPane.showMessageDialog(null, "The File you selected is not a project file, please select a different file", "File Does not match Project Table Format", 2);
                break;
        }
    }//GEN-LAST:event_uploadBtnActionPerformed

    // PROJECT EXCEL SHEET TO JTABLE
    public void projectExcel(File file) throws IOException {    
        String headers[] = {"rcn", "id", "acronym", "status", "programme", "topics", "FrameworkProgramme", "title", "Start Date", "End Date", "URL", "Objectives", "Total Cost", "ecMaxContribution", "call", "Funding Scheme", "Co-Ordinator", "Co-Ordinator Country", "Participants", "Participants Country", "subjects"};
        DefaultTableModel dtm = new DefaultTableModel(headers, 0);
        dataProPreview.setModel(dtm);
        dataProPreview.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        try {
            FileInputStream fs = new FileInputStream(file);
            BufferedInputStream bs = new BufferedInputStream(fs);
            XSSFWorkbook projectImport = new XSSFWorkbook(bs);
            XSSFSheet sheet = projectImport.getSheetAt(0);
            // Set to 1 to Skip Header Row as Headers are defined above
            for (int row = 1; row < sheet.getLastRowNum() + 1; row++) {
                
                XSSFRow nRow = sheet.getRow(row);
                
                XSSFCell proRCN = nRow.getCell(0, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell proID = nRow.getCell(1, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell proACR = nRow.getCell(2, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell status = nRow.getCell(3, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell programme = nRow.getCell(4, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell topics = nRow.getCell(5, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell frmPro = nRow.getCell(6, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell proTitle = nRow.getCell(7, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell startDate = nRow.getCell(8, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell endDate = nRow.getCell(9, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell url = nRow.getCell(10, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell obj = nRow.getCell(11, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell totalCost = nRow.getCell(12, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell ec = nRow.getCell(13, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell call = nRow.getCell(14, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell scheme = nRow.getCell(15, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell coOrdinator = nRow.getCell(16, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell coCountry = nRow.getCell(17, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell part = nRow.getCell(18, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell partCountry = nRow.getCell(19, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell subjects = nRow.getCell(20, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                System.out.println("#----------- NEW ROW -----------#");
                System.out.println("New Record Added - Record Count: " + row);
                
                Object[] data = {proRCN, proID, proACR, status, programme, topics, frmPro, proTitle, startDate, endDate, url, obj, totalCost, ec, call, scheme, coOrdinator, coCountry, part, partCountry, subjects};
                
                dtm.addRow(data);
            }
        }
        catch (IOException | NullPointerException ex) {
            // Log Error to User Activity Log for Previewing new Project Data File to Upload
        }
    }
    
    // PROJECT JTABLE TO MYSQL TABLE
    public void projectSQL(){
        
        int rows = dataProPreview.getRowCount();
        String query = "INSERT into project (projectRCN, projectID, projectAcronym, projectStatus, proName, proTopics, proFramework, projectTitle, startDate, endDate, projectURL, projectObjectives, totalCost, ecMaxContrib, callSign, fundingScheme, projectCoOrdinator, coCountry, participants, partCountries, subjects)"
            + " VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try {
            st = DBConnection.getConnection().prepareStatement(query);
            // Count set to 1 to Skip Header Row
            for (int row = 0; row != rows ; row++) {
                double tempRCN = Double.parseDouble(dataProPreview.getValueAt(row, 0).toString());
                int rcn = (int) tempRCN;
                st.setInt(1, rcn); // ProjectRCN
                double tempID = Double.parseDouble(dataProPreview.getValueAt(row, 1).toString());
                int id = (int) tempID;
                st.setInt(2, id); // projectID
                st.setString(3, dataProPreview.getValueAt(row, 2).toString()); // projectAcronym
                st.setString(4, dataProPreview.getValueAt(row, 3).toString()); // projectStatus
                st.setString(5, dataProPreview.getValueAt(row, 4).toString()); // projectName
                st.setString(6, dataProPreview.getValueAt(row, 5).toString()); // projectTopics
                st.setString(7, dataProPreview.getValueAt(row, 6).toString()); // projectFramework
                st.setString(8, dataProPreview.getValueAt(row, 7).toString()); // projectTitle
                String sDate = dataProPreview.getValueAt(row, 8).toString();
                if (sDate != null && !sDate.isEmpty()) {
                    Date sd = sdf.parse(sDate);
                    java.sql.Date startDate = new java.sql.Date(sd.getTime());
                    st.setDate(9, startDate); // startDate
                }               
                String eDate = dataProPreview.getValueAt(row, 9).toString();
                if (eDate != null && !eDate.isEmpty()) {
                    Date ed = sdf.parse(eDate);
                    java.sql.Date endDate = new java.sql.Date(ed.getTime());
                    st.setDate(10, endDate); // endDate
                }
                st.setString(11, dataProPreview.getValueAt(row, 10).toString()); // projectURL
                st.setString(12, dataProPreview.getValueAt(row, 11).toString()); // projectObjectives
                double tc = parseDouble(dataProPreview.getValueAt(row, 12).toString());
                st.setObject(13, tc, Types.DOUBLE); // projectTotalCost
                double ec = parseDouble(dataProPreview.getValueAt(row, 13).toString());
                st.setObject(14, ec, Types.DOUBLE); // projectEcMaxContributions
                st.setString(15, dataProPreview.getValueAt(row, 14).toString()); // projectCallSign
                st.setString(16, dataProPreview.getValueAt(row, 15).toString()); // projectFundingScheme
                st.setString(17, dataProPreview.getValueAt(row, 16).toString()); // projectCoOrdinator
                st.setString(18, dataProPreview.getValueAt(row, 17).toString()); // coOrdinatorCountry
                st.setString(19, dataProPreview.getValueAt(row, 18).toString()); // projectParticipants
                st.setString(20, dataProPreview.getValueAt(row, 19).toString()); // participantsCountry
                st.setString(21, dataProPreview.getValueAt(row, 20).toString()); // projectSubjects
                
                st.executeUpdate();
                System.out.println("New Record exported to MySQL Database: " + row);
            }
            System.out.println("New Project Data has been added to SQL Table");
            userSession.uploadProject();
        }
        catch (SQLException ex) {
            System.out.println(ex.getMessage());
        } 
        catch (ParseException ex) {
            Logger.getLogger(PreviewUpload.class.getName()).log(Level.SEVERE, null, ex);
        }   
    }
    
    // Check if Cell is Null
    public double parseDouble(String strNum) {
        if (strNum != null && strNum.length() > 0 ) {
            try {
                return Double.parseDouble(strNum);
            }
            catch (NumberFormatException ex) {
                return -1;
            }
        }
        else {
            return 0;
        }
    }
    
    
    
    
    // PARTICIPANT EXCEL SHEET TO JTABLE
    public void partExcel(File file) throws IOException {    
        String headers[] = {"project RCN", "project ID", "Project Acronym", "Role", "id", "Participant-Name", "Short-Name", "ActivityType", "EndOfParticipation", "ecContribution", "Country", "Street", "City", "Post Code", "url", "vatNumber"};
        DefaultTableModel dtm = new DefaultTableModel(headers, 0);
        dataProPreview.setModel(dtm);
        dataProPreview.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        try {
            FileInputStream fs = new FileInputStream(file);
            BufferedInputStream bs = new BufferedInputStream(fs);
            XSSFWorkbook projectImport = new XSSFWorkbook(bs);
            XSSFSheet sheet = projectImport.getSheetAt(0);
            
            // Set to 1 to Skip Header Row as Headers are defined above
            for (int row = 1; row < sheet.getLastRowNum() + 1; row++) {
                XSSFRow nRow = sheet.getRow(row);
                
                XSSFCell proRCN = nRow.getCell(0, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell proID = nRow.getCell(1, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell proACR = nRow.getCell(2, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell role = nRow.getCell(3, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell id = nRow.getCell(4, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell partName = nRow.getCell(5, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell partSName = nRow.getCell(6, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell activityType = nRow.getCell(7, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell endOfParticipation = nRow.getCell(8, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell ecContrib = nRow.getCell(9, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell country = nRow.getCell(10, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell street = nRow.getCell(11, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell city = nRow.getCell(12, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell postCode = nRow.getCell(13, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell url = nRow.getCell(14, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                XSSFCell vatNo = nRow.getCell(15, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                System.out.println("#----------- NEW ROW -----------#");
                System.out.println("New Record Added - Record Count: " + row);
                
                Object[] data = {proRCN, proID, proACR, role, id, partName, partSName, activityType, endOfParticipation, ecContrib, country, street, city, postCode, url, vatNo};
                dtm.addRow(data);
            }
        }
        catch (IOException ex) {
            // Log Error to User Activity Log for Previewing new Project Data File to Upload
        }
    }
    
    // PARTICIPANT JTABLE TO MYSQL TABLE
    public void partSQL(){
        int rows = dataProPreview.getRowCount();
        String query = "INSERT into participant (projectRCN, projectID, projectAcronym, role, id, name, shortName, activityType, endOfParticipation, ecContribution, country, street, city, postCode, url, vatNo)"
            + " VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try {
            st = DBConnection.getConnection().prepareStatement(query);
            // Count set to 1 to Skip Header Row
            for (int row = 0; row != rows ; row++) {
                double tempRCN = parseDouble(dataProPreview.getValueAt(row, 0).toString());
                int rcn = (int) tempRCN;
                st.setInt(1, rcn); // ProjectRCN
                double tempID = parseDouble(dataProPreview.getValueAt(row, 1).toString());
                int id = (int) tempID;
                st.setInt(2, id); // projectID
                st.setString(3, dataProPreview.getValueAt(row, 2).toString()); // projectAcronym
                st.setString(4, dataProPreview.getValueAt(row, 3).toString()); // role
                double partTempID = parseDouble(dataProPreview.getValueAt(row, 4).toString());
                int partID = (int) partTempID;
                st.setInt(5, partID); // id
                st.setString(6, dataProPreview.getValueAt(row, 5).toString()); // participantName
                st.setString(7, dataProPreview.getValueAt(row, 6).toString()); // participantShortName
                st.setString(8, dataProPreview.getValueAt(row, 7).toString()); // activityType
                boolean ended = Boolean.valueOf(dataProPreview.getValueAt(row, 8).toString());
                st.setBoolean(9, ended); // endOfParticipation
                double ecContribs = parseDouble(dataProPreview.getValueAt(row, 9).toString());
                int ec = (int) ecContribs;
                st.setInt(10, ec); // ecContributions
                st.setString(11, dataProPreview.getValueAt(row, 10).toString()); // country
                st.setString(12, dataProPreview.getValueAt(row, 11).toString()); // street
                st.setString(13, dataProPreview.getValueAt(row, 12).toString()); // city
                st.setString(14, dataProPreview.getValueAt(row, 13).toString()); // postCode
                st.setString(15, dataProPreview.getValueAt(row, 14).toString()); // url
                st.setString(16, dataProPreview.getValueAt(row, 15).toString()); // vatNo
                
                st.executeUpdate();
                System.out.println("New Record exported to MySQL Database: " + row);
            }
            System.out.println("New Participant Data has been added to SQL Table");
            userSession.uploadPart();
        }
        catch (SQLException ex) {
            System.out.println(ex.getMessage());
        } 
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PreviewUpload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PreviewUpload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PreviewUpload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PreviewUpload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new PreviewUpload().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTable dataProPreview;
    private javax.swing.JButton exitBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton minimizeBtn;
    private javax.swing.JPanel titleBar;
    private javax.swing.JButton uploadBtn;
    // End of variables declaration//GEN-END:variables
}
